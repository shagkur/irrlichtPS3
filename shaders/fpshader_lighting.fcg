float attenuateLight(float3 P, float3 Lpos, float3 Lattn)
{
	float d = distance(Lpos, P);
	return 1.0f/(Lattn.x + Lattn.y*d + Lattn.z*d*d);
}

float dualConeSpotlight(float3 P, float3 Lpos, float3 Ldir, float3 Lspot)
{
	float3 V = normalize(Lpos - P);
	float direction = dot(V, Ldir);
	return smoothstep(Lspot.x, Lspot.y, direction);
}

float4 main(float2 texcoord : TEXCOORD0,
			float3 position : TEXCOORD1,
			float3 normal : TEXCOORD2,
			
			uniform float3 eyePos,			// must be in object space!!!!
			
			uniform float4 Lposition,		// must be in object space!!!!
			uniform float4 Ldirection,		// must be in object space!!!!
			uniform float3 Ldiffuse,
			uniform float3 Lspecular,
			uniform float3 Lattenuation,
			uniform float3 Lspot,
			
			uniform float3 Kdiffuse,
			uniform float3 Kspecular,
			
			uniform float shininess,
			
			uniform sampler2D texture : TEXUNIT0
		   ) : COLOR0
{
	float3 L;
	float3 N = normalize(normal);
	float attenuation;
	float specularLight = 0.0f;
	
	if(Lposition.w == 0.0f) {
		attenuation = 1.0f;
		L = normalize(Lposition.xyz);
	} else {
		L = normalize(Lposition.xyz - position.xyz);
		attenuation = attenuateLight(position.xyz, Lposition.xyz, Lattenuation);

		if(Ldirection.w == 0.0f) {
			attenuation = attenuation*dualConeSpotlight(position.xyz, Lposition.xyz, Ldirection.xyz, Lspot);
		}
	}
	
	float diffuseLight = max(0.0f, dot(N, L));
	if(shininess > 0.0f && diffuseLight > 0.0f) {
		float3 V = normalize(eyePos - position);
		float3 H = normalize(L + V);
		specularLight = pow(max(0.0f, dot(N, H)), shininess);
	}

	float3 diffuse = Kdiffuse*Ldiffuse*diffuseLight*attenuation;
	float3 specular = Kspecular*Lspecular*specularLight*attenuation;
	
	return float4(diffuse*tex2D(texture, texcoord).rgb + specular, 1.0f);
}
